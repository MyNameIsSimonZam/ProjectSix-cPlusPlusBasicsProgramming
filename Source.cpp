#include <iostream>
#include <string>
#include <cmath>


/*Задача 1. Начальник.
Напишите программу для робота - начальника.Он спрашивает у пользователя,
выполнил ли он задания, которые выдавал вчера, и продолжает это делать до тех пор,
пока тот не ответит ему “Да, конечно, сделал”.
Подсказка 1: строки можно сравнивать вот так : (answer == “Да, конечно, сделал”),
где answer — переменная с типом std::string
Подсказка 2 : чтобы считать строку с пробелами, воспользуйтесь функцией std::getline(std::cin, line)*/

void task11() {
	std::string answer;
	std::cin.ignore();
	do {
		std::cout << "Did you make the task? ";
		std::getline(std::cin, answer);
	} while (answer != "Yes of course!");
}

/*Задача 2. Купи слона.
Напишите программу - дразнилку “Купи слона”.Она спрашивает у пользователя,
как его зовут, затем отвечает “% username%, купи слона!”.Дальше, что бы он ни говорил,
она передразнивает : Все говорят “...”, а ты купи слона!
Так повторяется бесконечно.
Пример
- Хорошо, давай куплю.
- Все говорят “Хорошо, давай куплю.”, а ты купи слона!*/


void task12() {
	std::cin.ignore();
	std::string name;
	std::string answer;
	std::cout << "What is your name? ";
	std::getline(std::cin, name);
	std::cout << name << ", buy the elephant!\n";
	while (1) {
		std::getline(std::cin, answer);
		std::cout << "Everybody say like that, " << answer << ", but you, buy the elephant!\n";
	}
}

/*Задача 3. Таблица степеней.
Напишите программу, которая выводила бы N первых степеней числа К.
Посмотрите, что случится, если N или K будут достаточно большими*/

void task13() {
	int k = 2;
	int n = 1;
	while (n < 10000) {
		std::cout << std::pow(k, n) << "\n";
		n += 1;
	}
}


/*Задача 4. Напоминалка.
Василий — очень ответственный менеджер, но очень забывчивый.
Иногда он пьет воду несколько раз подряд, потому что забыл, что только что пил.
Напишите для него программу - напоминалку.В самом начале программа спрашивает,
сколько раз ему напомнить, а затем нужное количество раз выводит “Вы хотели не забыть о чем - то”.
Усложнение: добавьте возможность ввести фразу - напоминалку, чтобы можно было напоминать о чем - то конкретном*/

void task14() {
	int count = 0;
	int result;
	std::string notice;
	std::cout << "How many times do you want to be reminded? ";
	std::cin >> result;
	std::cout << "What do you want to be reminded about? ";
	std::cin >> notice;
	while (count < result) {
		std::cout << notice << "\n";
		count += 1;
	}
}

/*Задача 5. Банкомат 3.0.
В банке ПлюсПлюсБанк тестируют новую систему пин - кодов на банкоматы.
Теперь вместо фиксированного пин - кода пользователь должен ввести 4 числа.
Если их сумма оказывается равна 42, пользователь может продолжать работу.
Напишите программу, которая спрашивает у пользователя 4 числа и отвечает “Ввод корректный”,
если их сумма равна 42, и “Ввод некорректный, попробуйте еще раз” в противном случае.
Так повторяется бесконечно*/

void task15() {

}

/*Задача 6. Сумма чисел.
У бухгалтера сломались счеты.Напишите программу, которая считала бы сумму вводимых чисел.
В начале у бухгалтера спрашивают, сколько чисел тот хочет сложить,
затем нужное количество раз просят ввести число и в конце выводят получившуюся сумму*/

void task16() {

}















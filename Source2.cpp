#include <iostream>
#include <string>

/*Задание 1. Кукушка
Что нужно сделать
Напишите программу, которая имитировала бы часы с кукушкой.
В начале работы она спрашивает, который час, а затем нужное количество раз пишет
«Ку - ку!».При выполнении задания необходимо обеспечить контроль ввода
(например, количество часов не может быть отрицательным).
Пример выполнения
Введите, который час : 2
Ку - ку!
Ку - ку!
Рекомендации по выполнению
Обратите внимание, если вы захотите использовать 24 - часовой формат,
в котором часы имеют значения 0–23, то кукушка не сможет вас оповестить
о полночи(нулевой час).
Что оценивается
• Есть проверка входных значений.
• Количество выведенных на консоль фраз равно количеству часов.
*/


void pW1() {
	int hour = 0;
	std::cout << "What time is it? (in 12-hour format) ";
	std::cin >> hour;
	if (hour < 1 || hour > 12) std::cout << "Yor number is not 12-hour format\n";
	int i = 0;
	while (i < hour) {
		std::cout << "Ку - ку!\n";
		i++;
	}
}

/*Задание 2. Слишком большие числа
Что нужно сделать
У неудачливого бухгалтера всё опять идёт наперекосяк : ему приносят такие большие счета, что числа не помещаются на бумаге.
Напишите программу, которая считала бы для него, сколько цифр(знаков) во вводимом числе.
Пример выполнения
Введите число : 10
Цифр в числе : 2
Рекомендации по выполнению
• Тип int вмещает в себя не больше десяти цифр(предположим, что у бухгалтера очень маленькие листы бумаги).
• Проверьте, как программа будет себя вести на отрицательных числах и нуле.
Что оценивается
• В числе ноль программа определяет одну цифру.
• Количество цифр определяется правильно.*/

void pW2() {
	int number = 0;
	std::cout << "Enter the number ";
	std::cin >> number;
	int i = 0;
	if (number == 0) i = 1;
	if (number < 0) number *= -1;
	while (number > 0) {
		number /= 10;
		i++;
	}
	std::cout << i;

}

/*Задание 3. Коллекторы
Что нужно сделать
Напишите робота для коллекторов.В самом начале он спрашивает имя должника и сумму долга,
а затем начинает требовать у него погашения долга до тех пор, пока тот не будет погашен полностью.
Сумма долга должна уменьшаться, если пользователь ввёл сумму, меньшую чем сумма долга.
Если пользователь внёс большую сумму, чем требуется для погашения, выведите сообщение о том,
какой у него остаток на счету после такой операции.Обеспечьте контроль ввода.
Рекомендации по выполнению
При полной выплате долга необходимо учитывать остаток на счету, если он имеется.
Что оценивается
• Правильно считается остаток после полного погашения долга.
• Программа прекращает выполнение после того, как долг полностью погашен.
• При задании отрицательного долга программа выводит предупреждение и прекращает выполнение.
*/


void pW3() {
	int loan = 0;
	std::string name;
	std::cout << "Enter the Name ";
	std::cin >> name;
	std::cout << "Enter the loan ";
	std::cin >> loan;
	if (loan <= 0) "Loan incorrect\n";
	while (loan >= 0) {
		int temp;
		std::cout << name << " Could you pay back the money you borrowed?\n";
		std::cin >> temp;
		loan -= temp;
		std::cout << name << " Your account balance is " << loan << "\n";
	}
}

/*Задание 4. Счастливый билетик
Что нужно сделать
В старину, когда даже в столице билеты в общественном транспорте выдавали контролёры, существовало поверье :
если на билете сумма первых трёх цифр в номере билета равна сумме трёх последних, то это к удаче.
Напишите программу, которая получала бы на вход шестизначный номер билета и выводила, счастливый это билет или нет.
К примеру, билеты 666 666 и 252 135 — счастливые, а 123 456 — нет.
Пример выполнения
Введите номер билета : 123060
Билет счастливый!
Введите номер билета : 123040
Повезёт в следующий раз!
Рекомендации по выполнению
• Программу необходимо сделать так, чтобы можно было увеличить количество цифр в билете без особых изменений в коде.
• Для получения младшего разряда числа(самой правой цифры) используйте выражение : one_digit = digits % 10.
• Используйте циклы для подсчёта суммы цифр в номере билета.
Что оценивается
• Программа корректно определяет, является ли билет счастливым.
• Для подсчёта суммы цифр в билете используются циклы.
*/

void pW4() {

	int number = 0;
	int i = 0;
	int secondParth = 0;
	int firstParth = 0;
	std::cout << "Enter the number ";
	std::cin >> number;
	if (number <= 0) std::cout << "Number is incorrect\n";
	int temp = number; // we need temp to save number for future
	while (temp > 0) {
		temp /= 10;
		i++;
	}
	std::cout << "Your ticket contains " << i << " numbers\n"; // for the check

	int a = i / 2;
	while (a > 0) {
		secondParth += number % 10;
		number /= 10;
		a--;
	}
	std::cout << "Your second ticket's parth " << secondParth << "\n";

	a = i / 2;
	if (a % 2 != 0 && a > 9) number /= 10; // we'll need delite a central number, if we have that 
	while (a > 0) {
		firstParth += number % 10;
		number /= 10;
		a--;
	}
	std::cout << "Your first ticket's parth " << firstParth << "\n";

	if (secondParth == firstParth) std::cout << "Билет счастливый!\n";
	else std::cout << "Повезёт в следующий раз!\n";
}

/*Задание 5. Числа Фибоначчи
Что нужно сделать
Числами Фибоначчи называется следующая последовательность чисел : 1, 1, 2, 3, 5, 8, 13
и так далее(первое число равно 1, второе число равно 1, а каждое следующее равно сумме двух предыдущих).
Напишите программу, которая по данному номеру N выводит N - е число этой последовательности
(если оно не превосходит 2 147 483 647, конечно же).Обеспечьте контроль ввода.
Пример выполнения
Введите номер последовательности : 1
Число в последовательности : 1
Введите номер последовательности : 6
Число в последовательности : 8
Рекомендации по выполнению
• Заметьте, что последовательность Фибоначчи всегда одинаковая.Пользователь вводит только порядковый номер числа из последовательности.
• Обратите внимание, что условие типа if (value > 2147483647) не имеет смысла.
Что оценивается
• Результатом запроса является число из последовательности Фибоначчи.
• Число 1 определяется как первое и второе число последовательности.
*/

void pW5() {
	int number = 0;
	int b = 0;
	std::cout << "Enter the number ";
	std::cin >> number;
	if (number <= 0) std::cout << "The number is incorrect\n";
	if (number == 1 || number == 2) std::cout << "Your number is " << 1 << "\n";
	else
	{
		int i = 0;
		int a = 1;
		int temp = 1;
		while (i < number) {
			temp = a;
			a = b;
			b += temp;
			i++;
		}
		std::cout << "Your number is " << b << "\n";
	}
}

/*Задание 6. Вклады
Что нужно сделать
Вклад в банке составляет X рублей.Ежегодно он увеличивается на P процентов, после чего дробная часть копеек отбрасывается.
Определите, через сколько лет вклад составит не менее Y рублей. Напишите программу,
которая по данным числам X, Y, P определяет, сколько лет пройдёт, прежде чем сумма достигнет значения Y.
Пример выполнения
Введите размер вклада : 100
Введите процентную ставку : 10
Введите желаемую сумму : 200
Придётся подождать : 8 лет
Пример вычисления :
1 год : 100 + 10 % *100 = 110
2 год : 110 + 10 % *110 = 121
3 год : 121 + 10 % *121 = 133
Рекомендации по выполнению
• Расчёты проводятся в целых числах.
• У вклада есть капитализация процентов (проценты начисляются на весь остаток на счёте).
Что оценивается
Программа аварийно не завершается и не зависает при подсчёте вклада.
*/


void pW6() {
	int x = 0;
	int p = 0;
	int y = 0;
	int i = 1;
	std::cout << "Enter the amount of deposit: ";
	std::cin >> x;
	std::cout << "Enter the percentage of deposit: ";
	std::cin >> p;
	std::cout << "Enter the expected amount: ";
	std::cin >> y;


	while (x < y) {
		std::cout << i << " year: " << x << " + " << p << " % " << " * " << x << " = ";
		x += x * p / 100;
		std::cout << x << "\n";
		i++;
	}
	std::cout << "Придется подождать: " << i - 1 << " лет\n";

}

/* Задание 7. Сокращение дроби * (дополнительное задание)
Что нужно сделать
Пользователь вводит числа M и N.Напишите программу, которая преобразует дробь M / N
к несократимому виду и выдаёт получившийся результат.Обеспечьте контроль ввода.
Пример выполнения
Введите числитель : 4
Введите знаменатель : 6
Результат : 2 / 3
Введите числитель : 25
Введите знаменатель : 40
Результат : 5 / 8
Введите числитель : −6
Введите знаменатель : 12
Результат : −1 / 2
(При вводе отрицательных чисел в выводе должен быть только один ведущий минус.Неправильный вывод программы : 1 / −2, −1 / −2.)
Введите числитель : 896
Введите знаменатель : 3584
Результат : 1 / 4
Рекомендации по выполнению
Не забывайте о правилах деления чисел.Программа должна работать корректно и не должна «падать».
Что оценивается
• Алгоритм оптимальный, не бесконечный и не очень большой.Программа не зависает.
• Правильно определены критерии начала и конца цикла. */

void pW7() {
	int m = 0;
	int n = 0;
	int gcd = 0;
	bool f;
	std::cout << "Enter the numerator: ";
	std::cin >> m;
	std::cout << "Enter the denominator: ";
	std::cin >> n;

	while (f) {
		gcd = n % m;
		if (gcd )
	}



}
void pW8() {

}